{"version":3,"sources":["js/task-3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","setTimeout","logSuccess","id","time","logError","console","log","warn","amount","then","catch"],"mappings":";;;;;AA8EA,aA9EA,QAAA,wBACA,QAAA,iCAsCA,MAAMA,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGlDK,EAAkBC,IACdC,MAAAA,EAAQR,EAA0B,IAAK,KACtC,OAAA,IAAIS,QAAS,CAACC,EAASC,KAC1BC,WAAW,KACYT,KAAKE,SAAW,GAGjCK,EAAQG,EAAW,CAAEC,GAAIP,EAAYO,GAAIC,KAAMP,KAEhDG,EAAOK,EAAST,EAAYO,MAE9BN,MAILK,EAAa,EAAGC,GAAAA,EAAIC,KAAAA,MACtBE,QAAQC,mBAAmBJ,kBAAmBC,QAG5CC,EAAWF,IACbG,QAAQE,qCAAqCL,+BAGjDR,EAAgB,CAAEQ,GAAI,GAAIM,OAAQ,MAC/BC,KAAKR,GACLS,MAAMN,GAETV,EAAgB,CAAEQ,GAAI,GAAIM,OAAQ,MAC/BC,KAAKR,GACLS,MAAMN,GAETV,EAAgB,CAAEQ,GAAI,GAAIM,OAAQ,KAC/BC,KAAKR,GACLS,MAAMN,GAETV,EAAgB,CAAEQ,GAAI,GAAIM,OAAQ,MAC/BC,KAAKR,GACLS,MAAMN","file":"task-3.bc56ceab.js","sourceRoot":"../src","sourcesContent":["import '../sass/_common.scss';\nimport '../sass/_promisification.scss';\n\n/*\n    ### 3\nПерепиши функцию `makeTransaction()` так, \nчтобы она не использовала callback-функции `onSuccess` и `onError`, \nа принимала всего один параметр `transaction` и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\nconst makeTransaction = (transaction, onSuccess, onError) => {\n  const delay = randomIntegerFromInterval(200, 500);\n  setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n    if (canProcess) {\n      onSuccess(transaction.id, delay);\n    } else {\n      onError(transaction.id);\n    }\n  }, delay);\n};\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n    // Работает так\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n*/\n\n    // ======== Answer ========\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise ((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n        \n            if (canProcess) {\n              resolve(logSuccess({ id: transaction.id, time: delay }));\n            } else {\n             reject(logError(transaction.id));\n            }\n        }, delay);\n    }) \n};\n\nconst logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"]}