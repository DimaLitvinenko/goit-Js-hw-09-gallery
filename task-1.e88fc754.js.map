{"version":3,"sources":["js/task-1.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then"],"mappings":";;;;;AAkC0B,aAlC1B,QAAA,wBACA,QAAA,iCAqBA,MAAMA,EAAQC,GACH,IAAIC,QAASC,IAChBC,WAAW,KACPD,EAAQF,IACTA,KAILI,EAASC,GAAQC,QAAQC,sBAAsBF,OAErDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ","file":"task-1.e88fc754.js","sourceRoot":"../src","sourcesContent":["import '../sass/_common.scss';\nimport '../sass/_promisification.scss';\n\n/*\n    ### 1\nНапиши функцию `delay(ms)`, которая возвращает промис, \nпереходящий в состояние `\"resolved\"` через `ms` миллисекунд. \nЗначением исполнившегося промиса должно быть то кол-во миллисекунд \nкоторое передали во время вызова функции `delay`.\n\nconst delay = ms => {\n    // Твой код\n};\nconst logger = time => console.log(`Resolved after ${time}ms`);\n    // Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n*/\n\n    // ======== Answer ========\n\nconst delay = ms => {\n    return new Promise (resolve => {\n        setTimeout(() => {\n            resolve(ms)\n        }, ms)\n    });\n};\n      \nconst logger = time => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms"]}