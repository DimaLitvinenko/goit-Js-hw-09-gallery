{"version":3,"sources":["js/task-1.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","promise","reject","canFullfill","Math","random","onFullfilled","result","onRejected","error","x","y","catch","finally"],"mappings":";;;;;AAqEA,aArEA,QAAA,wBACA,QAAA,iCAkBA,MAAMA,EAAQC,GACH,IAAIC,QAASC,IAChBC,WAAW,KACPD,EAAQF,IACTA,KAILI,EAASC,GAAQC,QAAQC,sBAAsBF,OAErDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAUjB,MAAMK,EAAU,IAAIR,QAAQ,CAACC,EAASQ,KAC5BC,MAAAA,EAAcC,KAAKC,SAAW,GAEpCV,WAAW,KACHQ,GACAT,EAAQ,kEAGZQ,EAAO,qDACR,OAIP,SAASI,EAAaC,GAClBT,QAAQC,IAAI,8BACZD,QAAQC,SAASQ,KAGrB,SAASC,EAAWC,GAChBX,QAAQC,IAAI,4BACZD,QAAQC,SAASU,KAQrBR,EACCD,KAAKM,GACLN,KAAKU,IACFZ,QAAQC,IAAIW,GAEL,KAEVV,KAAKW,IACFb,QAAQC,IAAIY,KAEfC,MAAMJ,GACNK,QAAQ,IAAMf,QAAQC,IAAI","file":"task-1.3b5085d3.js","sourceRoot":"../src","sourcesContent":["import '../sass/_common.scss';\nimport '../sass/_promisification.scss';\n/*\n    ### 1\nНапиши функцию `delay(ms)`, которая возвращает промис, \nпереходящий в состояние `\"resolved\"` через `ms` миллисекунд. \nЗначением исполнившегося промиса должно быть то кол-во миллисекунд \nкоторое передали во время вызова функции `delay`.\nconst delay = ms => {\n    // Твой код\n};\nconst logger = time => console.log(`Resolved after ${time}ms`);\n    // Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n*/\n\n//    ======== Answer ========\nconst delay = ms => {\n    return new Promise (resolve => {\n        setTimeout(() => {\n            resolve(ms)\n        }, ms)\n    });\n};\n    \nconst logger = time => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n\n/* ==================================================================================\n * Создание промиса\n *  - Класс Promise\n *  - resolve\n *  - reject\n *  - Promise.prototype.then(onResolve, onReject)\n */\nconst promise = new Promise((resolve, reject) => {\n    const canFullfill = Math.random() > 0.5;\n    \n    setTimeout(() => {\n        if (canFullfill) {\n            resolve('Промис выполнился успешно, с результатом (исполнен, fulfilled)');\n        }\n\n        reject('Промис выполнился с ошибкой (отклонён, rejected)');\n    }, 1000);\n});\n\n  // promise.then(onFulfilled, onRejected);\nfunction onFullfilled(result) {\n    console.log('onFulfilled -> onFulfilled');\n    console.log(`✅ ${result}`);\n};\n\nfunction onRejected(error) {\n    console.log('onRejected -> onRejected');\n    console.log(`❌ ${error}`);\n};\n\n/*\n * Цепочки промисов (chaining)\n * Promise.prototype.catch(error)\n * Promise.prototype.finally()\n */\npromise\n.then(onFullfilled)\n.then(x=>{\n    console.log(x);\n\n    return 10;\n})\n.then(y=>{\n    console.log(y);\n})\n.catch(onRejected)\n.finally(() => console.log('Я буду выполнен в любом случае'));"]}